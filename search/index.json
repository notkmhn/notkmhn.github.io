[{"content":"tuya smart is one of biggest global manufacturers affordable whitelabel iot devices for various brands wanting use their wifi-connected led lights locally without connecting cloud went on hunt together run custom firmware these this writeup we describe out-of-bounds memory write bug found along exploit chain that allows overwriting all security keys needed control most flash over-the-air given physical access device started coordinated disclosure feb 12th 2022 report used which has since been patched newly-produced stock they friendly very cooperative want thank them our pleasant experience n.b jailbreak tooling can be summary identified vulnerability ap configuration process interesting subroutines sdks as well deployed managed build leading over factory-burned secrets more specifically parameters controlled data uuid unique identifier authentication key aka or parameter uniquely identify allow it further encrypt authenticate its tls-wrapped communication tuya\u0026rsquos servers pre-shared shared secret establish tls channel between armed possible configure i.e set local sec need communicate addition remotely initiating ota updates practically unexploitable attackers affected because vulnerable code path requires mode therefore would like make clear there\u0026rsquos likely little no impact average user however from jailbreaking point view advanced users who exercise software home rest elaborates details enjoy description start off let\u0026rsquos get bit background context up we\u0026rsquove tested have so-called \u0026lsquoap mode.\u0026rsquo usually reachable by turning then few times advertise wifi there connect user\u0026rsquos own network using any life style applications taking deeper look following recipe less what happens sets dhcp hands out leases assigns itself ip address listens port udp messages are sent apps onboard asked enter ssid optionally password after smartphone spams message service listening important note here entire payload contents not including headers cannot exceed 256 bytes once parses if sane will shut down reconfigure station attempt designated immediately starts cloud-based request-response sequence steps than until considered \u0026lsquofunctionally configured.\u0026rsquo purposes write-up keep ourselves just above onto implementation outlined encapsulated binary format essentially some tlv type-length-value crc check validity won\u0026rsquot at encapsulation it\u0026rsquos terribly what\u0026rsquos configurtion json-formatted encrypted structure self-explanatory 8-character ascii string generated result \u0026lsquoregistration request\u0026rsquo invoke short-lived one-time token right order \u0026lsquoactivated\u0026rsquo server side keeping mind move device\u0026rsquos equation object file named name indicates contains implements sizeable part bits function zooming into annotated psuedocode follows struct section highlights purest form field json length validation argument us pull oob clobber subsequent fields way gets meaning flow redirection exploitation provides great primitive working when comes useful caveats aware mentioned before wrapping necessary also puts size limit 232 null library parse modified version far we\u0026rsquore isn\u0026rsquot execute directly stack nor heap regions bk7231 processors may turn incorrect due general lack information about platform course ways around limitation e.g rop jop but makes generalized harder haven\u0026rsquot able agnostic yet limitations building analyzing registers\u0026rsquo content invocation site additionally find gadgets could chains initially stack\u0026rsquos whatever parsed received reversing trial-and-error runs e27 light mapped r0 pointer r1 0x10002 r2 0x80000000 r3 finish_cb r4 lan_ap_nw_cfg 0xfc [1] r5 passwd r6 r7 ty_cjson associated request away end receive buffer task so nicely constraints value rather handy instruction pattern littered enact side-effects register values where two pieces somewhat example perform operation pass specific search implement middle choosing displacement such respectively choose next same gadget semantically equivalent different consisting thumb instructions utilize modify gadget\u0026rsquos setting 72 padding followed 32 continue execution other effects large enough variety within executable least copies remote redirect nonetheless cry turns noticed piece test post-production testing bk7231t sdk bk7231n both versions seem multiple factory routines perhaps changing flash-persisted through serial functions pseudocode functionality something similar procedure read checks .. ty_json retrieved gateway_base_conf mallocsizeofgw_base_s checked presence subsequently successfully complete otherwise early bail-out occurs gateway_base_conf.auth_key c[\u0026#34auzkey\u0026#34] must empty gateway_base_conf.psk_key c[\u0026#34pskkey\u0026#34] gateway_base_conf.uuid c[\u0026#34uuid\u0026#34] gateway_base_conf.ap_ssid c[\u0026#34ap_ssid\u0026#34] should gateway_base_conf.prod_test c[\u0026#34prod_test\u0026#34] boolean false persist_to_encrypted_flashgateway_base_conf print debug info return caller ingredients overwrite ones though doing correctly tricky limited number usable try smuggle another simply fill trigger do intermediate namely holding represents thereby continues persisting chosen looking disassembly exact target location clearly putting wrap afterwards send 6669 includes bulb final proof-of-concept persists hangs reboot again allowing properly mitm acknowledgements his massive help disassembling dissecting dumping many models throughout validating exploitability timeline","date":"2022-03-29","description":"Identification and exploitation of a vulnerability affecting Tuya IoT devices, going from a device configuration request to remote code execution.","permalink":"https://rb9.nl/posts/2022-03-29-light-jailbreaking-exploiting-tuya-iot-devices/","tags":["iot","hardware","hacking"],"title":"Light jailbreaking: exploiting Tuya IoT devices for fun and profit"},{"content":"while writing exploit for vulnerability on particularly weird setup using java needed find way encode class bytecode as text decode it vulnerable machine chain couldn\u0026rsquot any of usual suspect classes do base64 encoding or other options available classpath target instead i\u0026rsquove found that this particular scenario much easier use granted doesn\u0026rsquot work conventional binary decoding works quite well when you have control over both ends line being said would definitely more standard solution general development there are some limitations including lack handling leading zero bytes which didn\u0026rsquot deal since always start magic sequence here\u0026rsquos python implementation sending side note it\u0026rsquos necessary make sure data is interpreted signed integer because will here couple examples first we them by appropriate constructor then invoking","date":"2021-08-21","description":"While writing an exploit for a Java EL injection vulnerability on a particularly weird setup using Java 7, I needed to find a way to encode Java class bytecode...","permalink":"https://rb9.nl/posts/2021-08-21-biginteger-usage-limited-text-binary-encoding/","tags":["java","short"],"title":"Java 7+ - using a BigInteger for (limited) text to binary decoding"},{"content":"recently i\u0026rsquove been wanting run rpi4 is hooked up network over wifi ideally recursive dns resolver that my entire home will be using should not have lot of latency would rather it on connected node since most our personal devices at are also don\u0026rsquot keep running all times conserve energy but if i\u0026rsquom going server could live above can\u0026rsquot one do better just device actually has always still hopefully low power your router this post i\u0026rsquoll go how generally about mucking around soho routers exactly what did achieve goal particular instance tp-link archer c3200 tldr you or similar enough model you\u0026rsquod like own tools services setup we which got sale couple years ago great starting point any other piece software vendor didn\u0026rsquot want simply does allow execute code there some access telnet highly limited presents configuration options available web ui anyway ssh listening accepts connections can login cannot get shell session commands. no biggie usually these limitations by changing their device\u0026rsquos firmware open source alternative ah well none surprising standard fare for pretty much every cheap consider $100+ consumer-grade out knowledge so we\u0026rsquoll find feature allows us goals now we\u0026rsquore determined take route specify looking little bit end scope creeping taking things too far here\u0026rsquos as article constrain ourselves finding persistable command execution doesn\u0026rsquot remote automatically triggerable startup identifying suitable persistent storage option binaries really anything vary quite from another here simple itself without external dependencies additionally make project more approachable interesting decided try possible hence hardware unless necessary information gathering first order business copy binary format dissect plethora idea side put together kind importantly use purposes default keys passwords cough backdoors grubby hands executables reverse engineer vulnerabilities exploit list goes luckily won\u0026rsquot it\u0026rsquos grab latest desired blob inside zip file next manual never touch usual procedure through smooth may obfuscated variety ways being said way matter worst case scenario reversing bootloader reveal its dirty secrets experience had combination basic analysis hypotheses gets job done hints filesystem moving look system realize linux-based they often exectuables them lovely know 32-bit arm useful see kernel modules easily exact version runs fantastic 2.6.36.4 armv7 processor fs understanding what\u0026rsquos sort expect notes later methodology follow figure least following items shown architecture files relate map normally accessible networks interfaces compiled versions custom made developers searching prior art armed depth online resources related search features specific certain urls set indicate two different models very backends there\u0026rsquos few names c7 c5 c2300 relevant prove wiki hacking exec rce bog-standard injection c2 diagnostic page ping util reviewing looks huge chunk work already cut potential exploitation fact same works 0.9.1 0.1 v004b.0 build 160712 time writing entrypoint ole\u0026rsquo fashioned nice published vulnerability exploitable exploration straightforward inexplicable reason subsystem form places worth diagnostics line tool ntp client write good reasons mind-boggling clients daemonized vendor-made orchestrator service started \u0026rsquod invoked within logging facilities whatever routers\u0026rsquo invoke else fails engineering parts bug hunting persistence doing commands method described even compile drop desire gives only ask indeed something than read-only squashfs worked fine however filesystems change choosing perhaps issue signature checking routine seems given current i\u0026rsquod someone figured then hmm. conundrum leads obvious question though store changes piggyback onto after answer utilizing flash block muck investigate further instead systems mainly aimed modifying mentioned decoding encoding backup needed makes sense contain used invocations sanitization sanitized right turns threat context converting .bin xml back awesome because changed surprise spending having tried decryption avail start partially de-compression algorithm initially went webserver contains functions dealing restore respectively briefly process hasn\u0026rsquot compared hardcoded des encryption key shows structure less operation compress proprietary compression encrypt compressed under static compute md5 hash encrypted output bin followed suboperations identified match main significant likely candidate everything supposedly implemented ahead or. maybe when isn\u0026rsquot inherently took break trying looked function hopes hit jackpots aand basically need comparing ghidra implementation emulating angr unicorn spend hunt down wrong modified provided emulation definitely faster approach especially testing independent state handful turn resulting along usage instructions found putting usb drive scripts mounted craft happily provide we\u0026rsquod imho comes varying degrees complexity easy installing toolchain favorite distro\u0026rsquos package repositories writeup cases involve building cross-compilation slightly exotic architectures big endian getting built easier supports ridiculously old kernels come came market foray wanted blackhole pihole luck once friend working statically cross compiling le rust install usable ubuntu debian prepare cargo config pointing linker target toolchain\u0026rsquos gcc last steps bash root directory uses let\u0026rsquos stripped release env variable pass strip flag nukedns prepared script launch plugged into reboot servers interface ing known advertising domain extra","date":"2021-03-12","description":"Recently, I've been wanting to run a PiHole server for ad-blocking in my home network, but I didn't want to set up a machine exclusively for it...","permalink":"https://rb9.nl/posts/2021-03-12-running-software-on-soho-router/","tags":["hardware","networking"],"title":"Running your own services on your SOHO router for the greater good"},{"content":"note this post initially there are challenges series all of which based on same problem varying conditions therefore we\u0026rsquoll go through them increasing order difficulty build solutions incrementally n.b files related problems for these their available common modulus we made rsa encryption scheme tester can you break it previous one is very easy so also try harder setting that we\u0026rsquore given two rsa-encrypted messages \\c_1 c_2\\ encryptions flag \\m\\ such \\c_1\\ public key \\n e_1\\ \\c_2\\ e_2\\ other words have message keys share be precise what m^{e_1} \\mod n\\ \\c_2 m^{e_2} \\e_1 randomly generated primes first challenge each multiplied by 17 second third respectively \\n\\ both large terms operations do multiply ciphertexts get ciphertext \\c_m\\ because textbook $$ \\begin{aligned} c_m n\\\\ c_1 \\cdot c_2 m^{e_1 e_2} \\end{aligned} if raise powers \\x\\ \\y\\ then together c_1^{x} c_2^{y} m^{e_1}^{x} m^{e_2}^{y} \\\\ x} m^{e_2 y} m^{x e_1} m^{y e_1 at point take advantage simply states \\a \\in \\mathbb{z}^{+}\\ greatest divisor \\d\\ \\x \\mathbb{z}\\ $$x d$$ calculate efficiently using coefficients happens negative compute modular inverse respective \\\\mod power absolute value coefficient after calculating three different cases simplest variation \\e_1\\ \\e_2\\ relatively prime meaning yields e_2 m^{1} \\quad \\text{by bézout's identity} we\u0026rsquove successfully recovered hence don\u0026rsquot recover itself but instead \\m^3 however know form cbctf{ .. 32 characters representing hex-encoded md5 hash bit length 8-bits per character 256 bits 40 charactes 16 312 when 3rd would vicinity 936 lot less than 4096 means cubic root yielding hardest not only right-padded null bytes until it\u0026rsquos ~8192 few before being encrypted start utilize method \\m_p^{17} where \\m_p\\ padded need retrieve \\m_p^{17}\\ how well things keep mind quite 8192 unpadded must least 482 17th becomes sort knowing follows format as ctf actually \\m^{17} no padding deterministic linear equivalent multiplying since bitstring representation \\xxxxx00000000000000\\ \\xxxxx\\ binary coveted facts stated above unpad coefficient1 \\2^b \\b\\ number needed pad close \\\\approx 7880\\ afterwards previously calculated \\2^{-b} \\2^{-b 17} raising now m_p^{17} 2^{-b 2^{b}^{17} m^{17} 2^{b -b mentioned wait haven\u0026rsquot decided worst case going off from real write program does steps described retrieves candidate checks starts expected use conservative starting \\b 7868\\ within attempts probably term seemed apt.\u0026#160\u0026#x21a9\u0026#xfe0e","date":"2017-11-15","description":"There are 3 challenges in this series, all of which are based on the same problem with varying conditions. Therefore, we’ll go through them in increasing order of difficulty and build solutions incrementally...","permalink":"https://rb9.nl/posts/2017-11-15-codeblue2017-common-modulus/","tags":["cryptography","ctf"],"title":"CODE BLUE CTF 2017 - Common Modulus series"}]