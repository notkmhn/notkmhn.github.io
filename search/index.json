[{"content":"recently i\u0026rsquove been wanting run rpi4 is hooked up network over wifi ideally recursive dns resolver that my entire home will be using should not have lot of latency would rather it on connected node since most our personal devices at are also don\u0026rsquot keep running all times conserve energy but if i\u0026rsquom going server could live above can\u0026rsquot one do better just device actually has always still hopefully low power your router this post i\u0026rsquoll go how generally about mucking around soho routers exactly what did achieve goal particular instance tp-link archer c3200 tldr you or similar enough model you\u0026rsquod like own tools services setup we which got sale couple years ago great starting point any other piece software vendor didn\u0026rsquot want simply does allow execute code there some access telnet highly limited presents configuration options available web ui anyway ssh listening accepts connections can login cannot get shell session commands. no biggie usually these limitations by changing their device\u0026rsquos firmware open source alternative ah well none surprising standard fare for pretty much every cheap consider $100+ consumer-grade out knowledge so we\u0026rsquoll find feature allows us goals now we\u0026rsquore determined take route specify looking little bit end scope creeping taking things too far here\u0026rsquos as article constrain ourselves finding persistable command execution doesn\u0026rsquot remote automatically triggerable startup identifying suitable persistent storage option binaries really anything vary quite from another here simple itself without external dependencies additionally make project more approachable myself am amateur hardware hacker best additional unless necessary information gathering first order business copy binary format dissect try plethora idea side put together kind importantly use purposes default keys passwords cough backdoors grubby hands executables reverse engineer vulnerabilities exploit list goes luckily won\u0026rsquot it\u0026rsquos grab latest desired blob inside zip file next manual never touch usual procedure through smooth may obfuscated variety ways being said way matter worst case scenario reversing bootloader reveal its dirty secrets experience had combination basic analysis hypotheses gets job done hints filesystem moving look system realize linux-based they often exectuables them lovely know 32-bit arm useful see kernel modules easily exact version runs fantastic 2.6.36.4 armv7 processor fs understanding what\u0026rsquos sort expect notes later methodology follow figure least following items shown architecture files relate map normally accessible networks interfaces compiled versions custom made developers searching prior art armed depth online resources related search features specific certain urls set indicate two different models very backends there\u0026rsquos few names c7 c5 c2300 relevant prove wiki hacking exec rce bog-standard injection c2 diagnostic page ping util reviewing looks huge chunk work already cut potential exploitation fact same works 0.9.1 0.1 v004b.0 build 160712 time writing entrypoint ole' fashioned nice published vulnerability exploitable exploration straightforward inexplicable reason subsystem form places worth diagnostics line tool ntp client write good reasons mind-boggling clients daemonized vendor-made orchestrator service started \u0026rsquod invoked within logging facilities whatever routers' invoke else fails engineering parts bug hunting persistence doing commands method described even compile drop desire gives only ask indeed something than read-only squashfs worked fine however filesystems change choosing perhaps issue signature checking routine seems given current i\u0026rsquod someone figured then hmm. conundrum leads obvious question though store changes piggyback onto after answer utilizing flash block muck investigate further instead systems mainly aimed modifying mentioned decoding encoding backup needed makes sense contain used invocations sanitization sanitized right turns threat context converting .bin xml back awesome because changed surprise spending having tried decryption avail decided start partially de-compression algorithm initially went webserver contains interesting functions dealing restore respectively briefly process hasn\u0026rsquot compared hardcoded des encryption key shows structure less operation compress proprietary compression encrypt compressed under static compute md5 hash encrypted output bin followed suboperations identified match main significant likely candidate everything supposedly implemented ahead or. maybe when isn\u0026rsquot inherently took break trying looked function hopes hit jackpots aand basically need comparing ghidra implementation emulating angr unicorn spend hunt down wrong modified provided emulation definitely faster approach especially testing independent state handful turn resulting along usage instructions found putting usb drive scripts mounted craft happily provide we\u0026rsquod imho comes varying degrees complexity easy installing toolchain favorite distro\u0026rsquos package repositories writeup cases involve building cross-compilation slightly exotic architectures big endian getting built easier supports ridiculously old kernels come came market foray wanted blackhole pihole luck once friend working statically cross compiling le rust install usable ubuntu debian prepare cargo config pointing linker target toolchain\u0026rsquos gcc last steps bash root directory uses let\u0026rsquos stripped release env variable pass strip flag nukedns prepared script launch plugged into reboot servers interface ing known advertising domain extra","date":"2021-03-12","description":"Recently, I've been wanting to run a PiHole server for ad-blocking in my home network, but I didn't want to set up a machine exclusively for it....","permalink":"https://rb9.nl/posts/2021-03-12-running-software-on-soho-router/","tags":null,"title":"Running your own services on your SOHO router for the greater good"}]